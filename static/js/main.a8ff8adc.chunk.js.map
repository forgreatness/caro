{"version":3,"sources":["App.js","index.js"],"names":["Square","props","className","data-value","value","onClick","Board","i","key","this","squares","rowIndex","numCols","row","push","renderSquare","numRows","board","renderRow","renderBoard","React","Component","Game","state","winner","history","Array","fill","xIsNext","moveNumber","status","current","console","log","length","winCondition","handleClick","previousMove","restartGame","slice","setState","line","numBoardRows","numBoardCols","leftMargin","topMargin","parseInt","rightMargin","bottomMargin","firstSquareOfCurrentRow","lastSquareOfCurrentRow","startingRowIndex","Math","max","endingRowIndex","min","j","unshift","firstSquareOfCurrentCol","lastSquareOfCurrentCol","startingColIndex","endingColIndex","LRDTopMargin","LRDBottomMargin","LRDiagonalDistance","startingLRDIndex","endingLRDIndex","RLDTopMargin","RLDBottomMargin","RLDiagonalDistance","startingRLDIndex","endingRLDIndex","calculateWinningLine","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a8ff8adc.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction Square(props) {\n  return (\n    <button className=\"square\" data-value={props.value} onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return <Square key={i} value={this.props.squares[i]} onClick={() => this.props.onClick(i)}/>;\n  }\n\n  renderRow(rowIndex, numCols) {\n    let row = [];\n\n    for (let i = 0; i < numCols; i++) {\n      row.push(this.renderSquare(rowIndex*numCols+i))\n    }\n\n    return <div className=\"board-row\" key={`row${rowIndex}`}>{row}</div>\n  }\n\n  renderBoard(numRows, numCols) {\n    let board = [];\n\n    for (let i = 0; i < numRows; i++) {\n      board.push(this.renderRow(i, numCols));\n    }\n\n    return board;\n  }\n\n  render() {\n    return (\n      <div>\n        {this.renderBoard(this.props.numRows, this.props.numCols)}\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      winner: null,\n      history: [{\n        squares: Array(400).fill(null)\n      }],\n      xIsNext: true,\n      moveNumber: 0\n    };\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.moveNumber];\n\n    console.log(history.length);\n    console.log(this.state.moveNumber);\n\n    let status;\n\n    if (this.state.winner != null) {\n      status = `Winner: ${this.state.winner}`;\n    } else {\n      status = `Next player: ${this.state.xIsNext ? 'X' : 'O'}`;\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board numRows={20} numCols={20} winCondition={5} squares={current.squares} onClick={(i) => this.handleClick(i)}/>\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <div>\n            <button onClick={() => this.previousMove()}>Redo</button>\n            <button onClick={() => this.restartGame()}>Restart</button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  previousMove() {\n    if (this.state.moveNumber === 0) {\n      return;\n    }\n    \n    const history = this.state.history.slice(0, this.state.moveNumber);\n\n    console.log(history.length);\n\n    this.setState({\n      history: history,\n      moveNumber: history.length - 1,\n      xIsNext: !this.state.xIsNext,\n      winner: null\n    });\n  }\n\n  restartGame() {\n    this.setState({\n      winner: null,\n      history: [{\n        squares: Array(400).fill(null)\n      }],\n      xIsNext: true,\n      moveNumber: 0\n    });\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.moveNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n\n    if (squares[i] || this.state.winner != null) {\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n\n    const line = calculateWinningLine(squares, i , 20, 20, 5);\n\n    this.setState({\n      history: history.concat([{\n        squares: squares\n      }]),\n      moveNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n      winner: (line != null) ? squares[i] : null\n    });\n  }\n}\n\nexport default Game;\n\nfunction calculateWinningLine(squares, i, numBoardRows, numBoardCols, winCondition) {\n  let line;\n  const leftMargin = i % numBoardCols;\n  const topMargin = parseInt(i / numBoardCols);\n  const rightMargin = (numBoardCols - 1) - leftMargin;\n  const bottomMargin = (numBoardRows - 1) - topMargin;\n\n  //Rows\n  line = [];\n  const firstSquareOfCurrentRow = topMargin * numBoardCols;\n  const lastSquareOfCurrentRow = firstSquareOfCurrentRow + (numBoardCols - 1);\n  const startingRowIndex = Math.max(firstSquareOfCurrentRow, i - (winCondition - 1));\n  const endingRowIndex = Math.min(lastSquareOfCurrentRow, i + (winCondition - 1));\n\n  for (let j = startingRowIndex; j <= endingRowIndex && (endingRowIndex - j + 1) >= (winCondition - line.length); j++) {\n    if (squares[j] == null || squares[j] !== squares[i]) {\n      line = [];\n    } else {\n      line.unshift(j)\n      if (line.length === winCondition) {\n        return line;\n      }\n    }\n  }\n\n  //Columns\n  line = [];\n  const firstSquareOfCurrentCol = i % numBoardCols;\n  const lastSquareOfCurrentCol = firstSquareOfCurrentCol + numBoardCols * (numBoardRows - 1);\n  const startingColIndex = Math.max(firstSquareOfCurrentCol, i - (winCondition - 1) * numBoardCols);\n  const endingColIndex = Math.min(lastSquareOfCurrentCol, i + (winCondition - 1) * numBoardCols);\n  \n  for (let j = startingColIndex; j <= endingColIndex && ((endingColIndex - j) / numBoardCols + 1) >= (winCondition - line.length); j+=numBoardCols) {\n    if (squares[j] == null || squares[j] !== squares[i]) {\n      line = [];\n    } else {\n      line.unshift(j)\n      if (line.length === winCondition) {\n        return line;\n      }\n    }\n  }\n    \n  //LRDiagonal\n  line = [];\n  const LRDTopMargin = Math.min(leftMargin, topMargin);\n  const LRDBottomMargin = Math.min(rightMargin, bottomMargin);\n  const LRDiagonalDistance = numBoardCols + 1;\n  const startingLRDIndex = Math.max(i - (winCondition - 1) * LRDiagonalDistance, i - LRDTopMargin * LRDiagonalDistance);\n  const endingLRDIndex = Math.min(i + (winCondition + 1) * LRDiagonalDistance, i + LRDBottomMargin * LRDiagonalDistance);\n  \n  for (let j = startingLRDIndex; j <= endingLRDIndex && ((endingLRDIndex - j) / LRDiagonalDistance + 1) >= (winCondition - line.length); j+=LRDiagonalDistance) {\n    if (squares[j] == null || squares[j] !== squares[i]) {\n      line = [];\n    } else {\n      line.unshift(j)\n      if (line.length === winCondition) {\n        return line;\n      }\n    }\n  }\n\n  //RLDiagonal\n  line = [];\n  const RLDTopMargin = Math.min(rightMargin, topMargin);\n  const RLDBottomMargin = Math.min(bottomMargin, leftMargin);\n  const RLDiagonalDistance = numBoardCols - 1;\n  const startingRLDIndex = Math.max(i - (winCondition - 1) * RLDiagonalDistance, i - RLDTopMargin * RLDiagonalDistance);\n  const endingRLDIndex = Math.min(i + (winCondition - 1) * RLDiagonalDistance, i + RLDBottomMargin * RLDiagonalDistance);\n\n  for (let j = startingRLDIndex; j <= endingRLDIndex && ((endingRLDIndex - j) / RLDiagonalDistance + 1) >= (winCondition - line.length); j+=RLDiagonalDistance) {\n    if (squares[j] == null || squares[j] !== squares[i]) {\n      line = [];\n    } else {\n      line.unshift(j)\n      if (line.length === winCondition) {\n        return line;\n      }\n    }\n  }\n\n  return null;\n} \n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './App';\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);"],"sourceRoot":""}